{"version":3,"sources":["components/Main.js","components/File.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","state","scheme","require","this","route","files","forEach","file","index","exactPath","name","push","exact","path","render","React","Component","File","Navbar","list","key","class","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uiBAkCeA,E,YA5Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,OAAQC,EAAQ,KAFb,E,sEAMjB,IAAID,EAASE,KAAKH,MAAMC,OACpBG,EAAQ,GAUZ,OATAH,EAAOI,MAAMC,SAAQ,SAASC,EAAMC,GAClC,IAAIC,EAAY,IAAMF,EAAKG,KAC3BN,EAAMO,KACJ,kBAAC,IAAD,CACEC,OAAK,EAACC,KAAMJ,EACZK,OAAQ,SAACf,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAV,CAAiBQ,KAAMA,YAK9C,6BACE,kBAAC,EAAD,CAAQN,OAAQA,IAChB,kBAAC,IAAD,KACGG,Q,GAtBQW,IAAMC,WCaVC,E,YAdb,WAAYlB,GAAQ,qEACZA,I,sEAIN,IAAIQ,EAAOJ,KAAKJ,MAAMQ,KACtB,OACE,6BACE,8BAAOA,EAAKG,W,GATDK,IAAMC,WCiCVE,E,YA/Bb,WAAYnB,GAAQ,qEACZA,I,sEAIN,IAAIE,EAASE,KAAKJ,MAAME,OACpBkB,EAAO,GASX,OARAlB,EAAOI,MAAMC,SAAQ,SAASC,EAAMC,GAClCW,EAAKR,KACH,wBAAIS,IAAKZ,EAAOa,MAAM,mBACpB,kBAAC,IAAD,CAAMA,MAAM,WAAWC,GAAIf,EAAKG,MAAOH,EAAKG,WAMhD,yBAAKW,MAAM,iDACT,4BAAQA,MAAM,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,uBAAuBC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBAC1K,0BAAMP,MAAM,yBAEd,kBAAC,IAAD,CAAMA,MAAM,eAAeC,GAAG,IAA9B,aACA,yBAAKD,MAAM,2BAA2BQ,GAAG,uBACvC,wBAAIR,MAAM,mCACPF,S,GAxBQJ,IAAMC,WCQZc,MARf,WACE,OACE,yBAAKC,UAAU,IACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,IAASvB,OAEP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGDwB,SAASC,eAAe,SDiHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03f313dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { Navbar, File } from './Components';\r\n\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {scheme: require(\"../json/scheme.json\")}\r\n  }\r\n\r\n  render() {\r\n    let scheme = this.state.scheme;\r\n    let route = [];\r\n    scheme.files.forEach(function(file, index) {\r\n      let exactPath = \"/\" + file.name;\r\n      route.push(\r\n        <Route\r\n          exact path={exactPath}\r\n          render={(props) => <File {...props} file={file} />}\r\n        />\r\n      );\r\n    });\r\n    return(\r\n      <div>\r\n        <Navbar scheme={scheme} />\r\n        <Switch>\r\n          {route}\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\n\r\nclass File extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let file = this.props.file;\r\n    return(\r\n      <div>\r\n        <span>{file.name}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default File;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let scheme = this.props.scheme;\r\n    let list = [];\r\n    scheme.files.forEach(function(file, index) {\r\n      list.push(\r\n        <li key={index} class=\"nav-item active\">\r\n          <Link class=\"nav-link\" to={file.name}>{file.name}</Link>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return(\r\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo03\" aria-controls=\"navbarTogglerDemo03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <Link class=\"navbar-brand\" to=\"\">Boostanak</Link>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo03\">\r\n          <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n            {list}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport { Main } from './components/Components';\n\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\n\nReactDOM.render((\n\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}